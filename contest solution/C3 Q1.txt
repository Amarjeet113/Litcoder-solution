Contest1 module 3rd  code
question 1st (Merge two sorted linked lists)




  
                                                                                                                                     #include <iostream>

using namespace std;

// Node definition
struct Node {
    int data;
    Node* next;
};

// Function to insert a node at the end of the linked list
void insert(Node* &head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = NULL;

    // If linked list is empty, make the new node as the head
    if (head == NULL) {
        head = newNode;
        return;
    }

    // Traverse to the end of the linked list and insert the new node
    Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Function to merge two sorted linked lists
Node* mergeLists(Node* headA, Node* headB) {
    // If one of the lists is empty, return the other list
    if (headA == NULL) {
        return headB;
    }
    if (headB == NULL) {
        return headA;
    }

    Node* mergedHead = NULL;
    Node* tail = NULL;

    // Set the head of the merged list to the smaller of the first nodes of headA and headB
    if (headA->data <= headB->data) {
        mergedHead = headA;
        tail = headA;
        headA = headA->next;
    }
    else {
        mergedHead = headB;
        tail = headB;
        headB = headB->next;
    }

    // Traverse both linked lists and merge the nodes in sorted order
    while (headA != NULL && headB != NULL) {
        if (headA->data <= headB->data) {
            tail->next = headA;
            tail = headA;
            headA = headA->next;
        }
        else {
            tail->next = headB;
            tail = headB;
            headB = headB->next;
        }
    }

    // Add remaining nodes of headA, if any
    if (headA != NULL) {
        tail->next = headA;
    }

    // Add remaining nodes of headB, if any
    if (headB != NULL) {
        tail->next = headB;
    }

    return mergedHead;
}

// Function to print the linked list
void printList(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    // Create the first linked list (headA)
    Node* headA = NULL;
    int n;
    cout << "Enter the number of elements in the first linked list: ";
    cin >> n;
    cout << "Enter the elements of the first linked list: ";
    int value;
    for (int i = 0; i < n; i++) {
        cin >> value;
        insert(headA, value);
    }

    // Create the second linked list (headB)
    Node* headB = NULL;
    cout << "Enter the number of elements in the second linked list: ";
    cin >> n;
    cout << "Enter the elements of the second linked list: ";
    for (int i = 0; i < n; i++) {
        cin >> value;
        insert(headB, value);
    }

    // Merge the two linked lists
    Node* mergedHead = mergeLists(headA, headB);

    // Print the merged linked list
    cout << "Merged linked list: ";
    printList(mergedHead);

    return 0;
}
