Contest1 module 4TH  code
question 1ST (Is Graph Bipartite)
IN MODULE 4TH QUESTION WILL REPEAT THAT'S WHY SOLUTION IS SAME.




  
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

bool isBipartite(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<int> color(n, -1); // -1 represents unvisited node

    for (int i = 0; i < n; i++) {
        if (color[i] == -1) {
            color[i] = 0; // color node i as 0
            queue<int> q;
            q.push(i);

            while (!q.empty()) {
                int curr = q.front();
                q.pop();

                for (int neighbor : graph[curr]) {
                    if (color[neighbor] == -1) {
                        color[neighbor] = 1 - color[curr]; // color neighbor with the opposite color of current node
                        q.push(neighbor);
                    } else if (color[neighbor] == color[curr]) {
                        return false; // if neighbor has the same color as current node, it is not bipartite
                    }
                }
            }
        }
    }

    return true; // all nodes have been visited and no odd cycles found, so the graph is bipartite
}

int main() {
    int n;
    cin >> n;

    vector<vector<int>> graph(n);
    for (int i = 0; i < n; i++) {
        int m;
        cin >> m;
        graph[i].resize(m);
        for (int j = 0; j < m; j++) {
            cin >> graph[i][j];
        }
    }

    bool bipartite = isBipartite(graph);
    cout << (bipartite ? "true" : "false") << endl;

    return 0;
}                                                                                                                    
